R__LOAD_LIBRARY(/usatlas/u/timrinn/workarea/roounfold/akshatversion/RooUnfold/libRooUnfold.so)

void responsematrix_laurabinning()
{
  gStyle->SetOptStat(0);
  RooUnfoldResponse *resp = new RooUnfoldResponse("resp","");
  RooUnfoldResponse *resp_towers = new RooUnfoldResponse("resp_towers","");

  Double_t bins[41];
  float initial = 1;
  for (int i = 0; i < 41;i++)
    {
      bins[i] = TMath::Power(10,initial);
      initial = initial + 0.05;
    }

  TH2D* htrain = new TH2D("htrain","training",40,bins,40,bins);
  TH2D* htraintrue = new TH2D("htraintrue","truth",40,bins,40,bins);
  htrain->Sumw2();
  htraintrue->Sumw2();

  resp->Setup(htrain,htraintrue);
  resp_towers->Setup(htrain,htraintrue);
  cout << 0.2 << endl;

  //TFile* infile1 = new TFile("../J1.root");
  TNtuple* ntup[5];

  for ( int jzfile = 1; jzfile < 6; jzfile ++)
    {
      stringstream qx; 
      qx <<"../JZ"<<jzfile<<".root";
      string qxname = qx.str();
      TFile*infile = new TFile(qxname.c_str());
      ntup[jzfile-1]= (TNtuple*)infile->Get("ntup");
    }
  cout << 0.3 << endl;

  TH1F* h_leadingpt = new TH1F("h_leadingpt","",40,bins);
  h_leadingpt->Sumw2();

  float leadingpt[5];
  float awayjetpt[5];
  float trueleadingpt[5];
  float trueawaypt[5];
  float leadjetetower[5];
  float awayjetetower[5];
  cout << 1 << endl;
  for (int i = 0; i < 5; i ++)
    {
      ntup[i]->SetBranchAddress("leadingpt",&leadingpt[i]);
      ntup[i]->SetBranchAddress("awaypt",&awayjetpt[i]);
      ntup[i]->SetBranchAddress("leadingtruept",&trueleadingpt[i]);
      ntup[i]->SetBranchAddress("awaytruept",&trueawaypt[i]);
    }
  // ntup->SetBranchAddress("leadjetetower",&leadjetetower);
  // ntup->SetBranchAddress("awayjetetower",&awayjetetower);

  Double_t weights[5] = {6.789E7*2.8748E-3,6.3996E5*4.2952E-3,4.7195E3*5.2994E-3,2.6602E1*5.2994E-3,2.2476E-1*2.1846E-3};

  double ptlimits[12] = {0,100,100,9000,100,126,126,158,158,200,200,9000};


  TH1D* h2_leading_pt= new TH1D("h2_leading_pt","",1000,0,1000);
  cout << 2 << endl;

  
  int *****statisticscheck = new int****[5];
  for (int q = 0; q < 5;q++)
    {
      statisticscheck[q] = new int***[40];
      for (int i = 0; i < 40;i++)
	{
	  statisticscheck[q][i] = new int**[40];xo
	  
	  for (int j = 0; j < 40;j++)
	    {
	      statisticscheck[q][i][j] = new int*[40];
	      for (int k = 0; k < 40;k++)
		{
		  statisticscheck[q][i][j][k] = new int[40];
		}
	    }
	}
    }
  for (int q = 0; q < 5; q++)
    {
      for (int i =0; i < ntup[q]->GetEntries();i++)
	{
	  ntup[q]->GetEntry(i);
	  if (awayjetpt[q] < 10){continue;}
	  int binrecolead = 0;
	  int binrecoaway = 0;
	  int bintruelead = 0;
	  int bintrueaway = 0;
	  for (int j = 0; j <40;j++)
	    {
	      if ( leadingpt[q] > bins[j] && leadingpt[q] < bins[j+1]){binrecolead = j;}
	      if ( awayjetpt[q] > bins[j] && awayjetpt[q] < bins[j+1]){binrecoaway = j;}
	      if ( trueleadingpt[q] > bins[j] && trueleadingpt[q] < bins[j+1]){bintruelead = j;}
	      if ( trueawaypt[q] > bins[j] && trueawaypt[q] < bins[j+1]){bintrueaway = j;}
	    }
	  statisticscheck[q][binrecolead][binrecoaway][bintruelead][bintrueaway] =  statisticscheck[q][binrecolead][binrecoaway][bintruelead][bintrueaway] + 1;
	}
    }  
  
  for (int q = 0; q < 5; q++)
    {

      for (int i =0; i < ntup[q]->GetEntries();i++)
	{
	  ntup[q]->GetEntry(i);
	  if (awayjetpt[q] < 10){continue;}
	  
	  int binrecolead = 0;
	  int binrecoaway = 0;
	  int bintruelead = 0;
	  int bintrueaway = 0;
	  for (int j = 0; j <40;j++)
	    {
	      if ( leadingpt[q] > bins[j] && leadingpt[q] < bins[j+1]){binrecolead = j;}
	      if ( awayjetpt[q] > bins[j] && awayjetpt[q] < bins[j+1]){binrecoaway = j;}
	      if ( trueleadingpt[q] > bins[j] && trueleadingpt[q] < bins[j+1]){bintruelead = j;}
	      if ( trueawaypt[q] > bins[j] && trueawaypt[q] < bins[j+1]){bintrueaway = j;}
	    }
	  if (statisticscheck[q][binrecolead][binrecoaway][bintruelead][bintrueaway] < 20) {continue;}
	  
	  h_leadingpt->Fill(trueawaypt[q],weights[q]);
	  h2_leading_pt->Fill(leadingpt[q],weights[q]);
	  htrain->Fill(leadingpt[q],awayjetpt[q],weights[q]);
	  htrain->Fill(awayjetpt[q],leadingpt[q],weights[q]);

	  //htrain->Fill(leadingpt,awayjetpt);
	  htraintrue->Fill(trueleadingpt[q],trueawaypt[q],weights[q]);
	  htraintrue->Fill(trueawaypt[q],trueleadingpt[q],weights[q]);

	  resp->Fill(leadingpt[q],awayjetpt[q],trueleadingpt[q],trueawaypt[q],weights[q]);
	  resp->Fill(awayjetpt[q],leadingpt[q],trueawaypt[q],trueleadingpt[q],weights[q]);

	}
    }


  stringstream oo;
  oo <<"responsematrix_20binmin.root";
  string ooname = oo.str();


  TFile* outfile = new TFile(ooname.c_str(),"RECREATE");
  resp->Write();
  htrain->Write();
  htraintrue->Write();
 
  TCanvas*c1 = new TCanvas("c1","",500,500);
  gPad->SetLogx();
  gPad->SetLogy();
  gPad->SetLogz();
  htrain->Draw("COLZ");


 
  TCanvas*c2 = new TCanvas("c2","",500,500);
  gPad->SetLogx();
  gPad->SetLogy();
  gPad->SetLogz();
  htraintrue->Draw("COLZ");

  c1->SaveAs("reco2d.png");
  c2->SaveAs("true2d.png");


}
